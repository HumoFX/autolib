"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const autobind_decorator_1 = __importDefault(require("autobind-decorator"));
const loglevel_1 = require("loglevel");
const base_1 = __importDefault(require("./base"));
const log = loglevel_1.getLogger('dcrf.send_queues.fifo');
class FifoQueue extends base_1.default {
    constructor(sendNow, canSend) {
        super(sendNow, canSend);
        this.queue = [];
    }
    send(bytes) {
        if (this.canSend()) {
            return this.sendNow(bytes);
        }
        else {
            this.queueMessage(bytes);
            return -1;
        }
    }
    queueMessage(bytes) {
        log.debug('Queueing message to send later: %o', bytes);
        this.queue.push(bytes);
        return true;
    }
    processQueue() {
        let numProcessed = 0;
        if (this.queue.length) {
            log.debug(`Sending ${this.queue.length} queued messages.`);
            while (this.queue.length) {
                const object = this.queue.shift();
                if (object !== undefined) {
                    this.sendNow(object);
                }
                numProcessed++;
            }
        }
        return numProcessed;
    }
}
__decorate([
    autobind_decorator_1.default
], FifoQueue.prototype, "send", null);
__decorate([
    autobind_decorator_1.default
], FifoQueue.prototype, "processQueue", null);
exports.FifoQueue = FifoQueue;
exports.default = FifoQueue;
