import { DispatchListener, IDispatcher } from '../interface';
declare type Listener<S, P extends S> = {
    selector: S;
    handler: DispatchListener<P>;
};
/**
 * Invokes listeners on a first-registered, first-called basis
 */
export declare class FifoDispatcher implements IDispatcher {
    private static listenerCounter;
    protected listeners: {
        [listenerId: number]: Listener<any, any>;
    };
    protected listenersOrder: number[];
    constructor();
    listen<S, P extends S>(selector: S, handler: DispatchListener<P>): number;
    once<S, P extends S>(selector: S, handler: DispatchListener<P>): number;
    cancel(listenerId: number): boolean;
    dispatch(payload: object): number;
}
export default FifoDispatcher;
