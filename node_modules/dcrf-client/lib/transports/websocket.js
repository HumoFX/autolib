"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const loglevel_1 = require("loglevel");
const events_1 = require("events");
const reconnecting_websocket_1 = __importDefault(require("reconnecting-websocket"));
const autobind_decorator_1 = __importDefault(require("autobind-decorator"));
const log = loglevel_1.getLogger('dcrf.transports.websocket');
/**
 * Transport backed by a reconnecting websocket
 */
class WebsocketTransport extends events_1.EventEmitter {
    /**
     *
     * @param url Websocket URL to connect to
     * @param options Options to pass to ReconnectingWebsocket
     */
    constructor(url, options = {}) {
        super();
        this.url = url;
        this.options = options;
        this.socket = null;
        this.hasConnected = false;
    }
    connect() {
        if (this.socket != null) {
            log.debug('Attempt to connect already-connected socket ignored (%s)', this.url);
            return false;
        }
        log.info('Connecting to websocket at %s', this.url);
        this.socket = new reconnecting_websocket_1.default(this.url, [], this.options);
        this.socket.addEventListener('message', this.handleMessage);
        this.socket.addEventListener('open', this.handleOpen);
        return true;
    }
    isConnected() {
        if (this.socket == null) {
            return false;
        }
        else {
            return this.socket.readyState === this.socket.OPEN;
        }
    }
    send(bytes) {
        if (this.socket === null) {
            throw new Error('Socket not connected. Please call `initialize()` first.');
        }
        this.socket.send(bytes);
    }
    handleMessage(event) {
        this.emit('message', event);
    }
    handleOpen(event) {
        this.emit('open', event);
        if (this.hasConnected) {
            this.emit('reconnect', event);
        }
        else {
            this.emit('connect', event);
            this.hasConnected = true;
        }
    }
}
__decorate([
    autobind_decorator_1.default
], WebsocketTransport.prototype, "connect", null);
__decorate([
    autobind_decorator_1.default
], WebsocketTransport.prototype, "isConnected", null);
__decorate([
    autobind_decorator_1.default
], WebsocketTransport.prototype, "send", null);
__decorate([
    autobind_decorator_1.default
], WebsocketTransport.prototype, "handleMessage", null);
__decorate([
    autobind_decorator_1.default
], WebsocketTransport.prototype, "handleOpen", null);
exports.WebsocketTransport = WebsocketTransport;
exports.default = WebsocketTransport;
